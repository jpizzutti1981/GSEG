from django.shortcuts import render, redirect
from .forms import NotificacaoForm
from .utils import enviar_mensagem_telegram, gerar_pdf_notificacao
from django.shortcuts import render
from .models import Notificacao
from django.contrib.auth.decorators import login_required
from django.shortcuts import render, redirect, get_object_or_404
from .models import Notificacao
from .forms import NotificacaoForm
from django.contrib import messages
from django.http import FileResponse, Http404
from django.http import HttpResponse
from django.conf import settings
import os
from django.shortcuts import render, get_object_or_404
from .models import Notificacao
from django.shortcuts import render, redirect
from django.utils.timezone import now
from django.http import Http404
from .forms import NotificacaoForm
from .models import Notificacao
from .utils import enviar_mensagem_telegram, gerar_pdf_notificacao
from django.db.models import Q
from django.shortcuts import render
from .models import Notificacao

from django.shortcuts import render
from django.db.models import Q
from .models import Notificacao
from datetime import datetime
from django.utils import timezone

@login_required
def criar_notificacao(request):
    if request.method == 'POST':
        form = NotificacaoForm(request.POST, request.FILES)
        if form.is_valid():
            notificacao = form.save(commit=False)  # üîπ Ainda n√£o salva no banco

            # üîπ Garante que a data e hora da ocorr√™ncia sejam preenchidas corretamente
            notificacao.data_ocorrencia = notificacao.data_ocorrencia or now().date()
            notificacao.hora_ocorrencia = notificacao.hora_ocorrencia or now().time()

            notificacao.save()  # üîπ Agora salva com os valores atualizados

            # üîπ Gera o PDF e obt√©m o caminho
            try:
                pdf_path = gerar_pdf_notificacao(notificacao) 
                if not pdf_path:
                    messages.error(request, "‚ö†Ô∏è Erro ao gerar o PDF da notifica√ß√£o.")
            except Exception as e:
                messages.error(request, f"‚ö†Ô∏è Erro ao gerar PDF: {str(e)}")
                pdf_path = None  # üîπ Evita que a aplica√ß√£o quebre

            # üîπ Envia mensagem para o Telegram com os detalhes da notifica√ß√£o
            mensagem = (
                f"üìù <b>Nova Notifica√ß√£o</b>\n"
                f"üè¨ Loja: {notificacao.loja}\n"
                f"‚úç Motivo: {notificacao.motivo}\n"
                f"üìÖ Data: {notificacao.data_ocorrencia.strftime('%d/%m/%Y')} √†s {notificacao.hora_ocorrencia.strftime('%H:%M')}"
            )
            enviar_mensagem_telegram(mensagem=mensagem)

            # ‚úÖ Mensagem de sucesso antes do redirecionamento
            messages.success(request, "‚úÖ Notifica√ß√£o cadastrada com sucesso!")

            return redirect('criar_notificacao')  # üîπ Mant√©m na mesma p√°gina para exibir mensagem
    else:
        form = NotificacaoForm()

    return render(request, 'notificacoes/notificacao_form.html', {'form': form})

@login_required
def listar_notificacoes(request):
    loja = request.GET.get("loja", "").strip()
    data = request.GET.get("data", "").strip()
    motivo = request.GET.get("motivo", "").strip()

    notificacoes = Notificacao.objects.all()

    print(f"üîé FILTROS RECEBIDOS - Loja: {loja}, Data: {data}, Motivo: {motivo}")

    # üîπ Filtra por loja
    if loja:
        notificacoes = notificacoes.filter(loja__icontains=loja)

    # üîπ Filtra por data (corrigido para o formato correto do banco)
    if data:
        try:
            data_formatada = datetime.strptime(data, "%Y-%m-%d").date()
            notificacoes = notificacoes.filter(data_ocorrencia=data_formatada)
        except ValueError:
            print("‚ö† ERRO: Data inv√°lida informada.")

    # üîπ Filtra por motivo (corrigido para funcionar corretamente)
    if motivo:
        notificacoes = notificacoes.filter(motivo__icontains=motivo)

    print(f"üîé RESULTADO FINAL: {notificacoes.count()} notifica√ß√µes encontradas.")

    return render(request, "notificacoes/listar_notificacoes.html", {
        "notificacoes": notificacoes,
        "loja": loja,
        "data": data,
        "motivo": motivo
    })

@login_required
def editar_notificacao(request, pk):
    notificacao = get_object_or_404(Notificacao, pk=pk)
    
    if request.method == 'POST':
        form = NotificacaoForm(request.POST, request.FILES, instance=notificacao)
        if form.is_valid():
            form.save()
            messages.success(request, "Notifica√ß√£o atualizada com sucesso!")
            return redirect('listar_notificacoes')
    else:
        form = NotificacaoForm(instance=notificacao)

    return render(request, 'notificacoes/editar_notificacao.html', {'form': form, 'notificacao': notificacao})

@login_required
def excluir_notificacao(request, pk):
    notificacao = get_object_or_404(Notificacao, pk=pk)
    
    if request.method == 'POST':
        notificacao.delete()
        messages.success(request, "Notifica√ß√£o exclu√≠da com sucesso!")
        return redirect('listar_notificacoes')

    return render(request, 'notificacoes/confirmar_exclusao.html', {'notificacao': notificacao})

@login_required
def download_pdf(request, pk):
    """ Baixa o PDF da notifica√ß√£o """
    try:
        notificacao = Notificacao.objects.get(pk=pk)
    except Notificacao.DoesNotExist:
        raise Http404("Notifica√ß√£o n√£o encontrada.")

    # üîπ Gera o PDF se n√£o existir
    pdf_path = gerar_pdf_notificacao(notificacao)

    if os.path.exists(pdf_path):
        return FileResponse(open(pdf_path, 'rb'), content_type='application/pdf', as_attachment=True)
    else:
        raise Http404("Arquivo PDF n√£o encontrado.")
    
@login_required
def detalhar_notificacao(request, pk):
    notificacao = get_object_or_404(Notificacao, pk=pk)

    # üîπ Processa os itens antes de enviar para o template
    #itens_notificados = []
    #if notificacao.itens_notificados and notificacao.itens_notificados != "Nenhum item registrado":
        #itens_notificados = [item.strip() for item in notificacao.itens_notificados.split(",")]

    return render(request, "notificacoes/detalhar_notificacao.html", {
        "notificacao": notificacao,
        #"itens_notificados": itens_notificados  # üîπ Agora o template recebe uma lista correta
    })
